#!/usr/bin/env python3
import os
import argparse
from subprocess import call

HOME = os.environ["HOME"] + "/"
CWD = os.getcwd()
DOTFILES = HOME + ".dotfiles/"

ignored = [
    ".git",
    "dotfiles",
]


def install():
    for i, file in enumerate(listFiles(DOTFILES)):
        print("[" + str(i) + "] " + HOME + file)
        createPath(HOME + file)
        createSymlink(HOME + file, DOTFILES + file)


def add(path: str):
    print(path)
    path = os.path.abspath(path)[len(HOME) :]
    print(path)
    if os.path.isfile(HOME + path):
        addFile(path)
    elif os.path.isdir(path):
        for file in listFiles(path):
            addFile(file)
    else:
        print("ERROR: " + path + " does not exist")
        return False


def rm(path: str):
    print("TODO")


def createPath(path):
    directories = path.split("/")
    dirstring = ""
    for directory in directories[:-1]:
        dirstring += directory + "/"
        if not os.path.isdir(dirstring):
            if not os.path.exists(dirstring):
                print("  Creating directory " + dirstring)
                os.mkdir(dirstring)
            else:
                print("Error: " + dirstring + " is a file. Expected a directory.")


def listFiles(path, basepath=None):
    files = []
    basepath = basepath or path
    for file in os.listdir(path):
        # Skip files in the ignored list
        if (path + "/" + file)[len(basepath) + 1 :] in ignored:
            continue
        # Add files to our list
        if os.path.isfile(path + "/" + file):
            files.append((path + "/" + file)[len(basepath) + 1 :])
        # Recursively check directories
        elif os.path.isdir(path + "/" + file):
            files = files + listFiles(path + "/" + file, basepath=basepath)
    return files


def addFile(path):
    homepath = HOME + path
    dfpath = DOTFILES + path
    createPath(dfpath)
    call(["mv", homepath, dfpath])
    call(["ln", "-s", dfpath, homepath])


def createSymlink(path, source):
    call(["rm", path])
    call(["ln", "-s", source, path])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog="Dotfiles")
    subparsers = parser.add_subparsers(dest="command")
    install_parser = subparsers.add_parser("install")
    add_parser = subparsers.add_parser("add")
    add_parser.add_argument("path")
    rm_parser = subparsers.add_parser("rm")
    rm_parser.add_argument("path")
    args = parser.parse_args()

    if args.command == "install":
        install()
    elif args.command == "add":
        add(args.path)
    elif args.command == "rm":
        rm(args.path)
    else:
        parser.print_help()
